"""
Report Generator Module

This module provides comprehensive reporting capabilities for the CalTrans bidding system,
including extraction summaries, bid analysis, project comparisons, and management dashboards.
"""

import io
import json
import logging
from datetime import datetime, timedelta
from typing import Dict, List, Any, Optional, Tuple, Union
from pathlib import Path
import pandas as pd
import plotly.graph_objects as go
import plotly.express as px
from plotly.subplots import make_subplots
import matplotlib.pyplot as plt
import matplotlib.dates as mdates
from matplotlib.figure import Figure
import seaborn as sns
from jinja2 import Template
import base64

# Configure logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)


class ReportGenerator:
    """
    Comprehensive Report Generator for CalTrans Bidding System
    
    Provides various reporting capabilities including:
    - Extraction summaries
    - Bid analysis reports
    - Project comparisons
    - Management dashboards
    - Multiple export formats (PDF, Word, HTML)
    """
    
    def __init__(self, company_name: str = "Zenlytic Solutions", 
                 output_dir: str = "output/reports"):
        """
        Initialize the Report Generator
        
        Args:
            company_name: Company name for branding
            output_dir: Directory for saving reports
        """
        self.company_name = company_name
        self.output_dir = Path(output_dir)
        self.output_dir.mkdir(parents=True, exist_ok=True)
        
        # Define color scheme for charts
        self.colors = {
            'primary': '#1F4E79',
            'secondary': '#4472C4',
            'accent': '#D9E2F3',
            'success': '#28A745',
            'warning': '#FFC107',
            'danger': '#DC3545',
            'info': '#17A2B8'
        }
        
        # Initialize report templates
        self._setup_templates()
    
    def _setup_templates(self):
        """Setup HTML templates for reports"""
        self.html_template = """
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>{{ title }}</title>
    <style>
        body { font-family: Arial, sans-serif; margin: 20px; }
        .header { background-color: #1F4E79; color: white; padding: 20px; text-align: center; }
        .section { margin: 20px 0; padding: 15px; border: 1px solid #ddd; border-radius: 5px; }
        .metric { display: inline-block; margin: 10px; padding: 15px; background-color: #f8f9fa; border-radius: 5px; }
        .metric-value { font-size: 24px; font-weight: bold; color: #1F4E79; }
        .metric-label { font-size: 14px; color: #666; }
        table { width: 100%; border-collapse: collapse; margin: 10px 0; }
        th, td { border: 1px solid #ddd; padding: 8px; text-align: left; }
        th { background-color: #1F4E79; color: white; }
        .chart { margin: 20px 0; text-align: center; }
        .footer { margin-top: 30px; padding: 15px; background-color: #f8f9fa; text-align: center; }
    </style>
</head>
<body>
    <div class="header">
        <h1>{{ title }}</h1>
        <p>{{ company_name }} - {{ date }}</p>
    </div>
    
    {{ content }}
    
    <div class="footer">
        <p>Generated by {{ company_name }} Report Generator</p>
        <p>Report ID: {{ report_id }}</p>
    </div>
</body>
</html>
        """
        
        self.template = Template(self.html_template)
    
    def generate_extraction_summary(self, extraction_results: Dict[str, Any]) -> str:
        """
        Generate a summary report of extraction results
        
        Args:
            extraction_results: Dictionary containing extraction data
            
        Returns:
            str: HTML formatted extraction summary report
        """
        try:
            logger.info("Generating extraction summary report")
            
            # Extract key metrics
            total_pages = extraction_results.get('total_pages', 0)
            total_terms = extraction_results.get('total_terms', 0)
            extraction_time = extraction_results.get('extraction_time', 0)
            confidence_score = extraction_results.get('confidence_score', 0)
            
            # Create metrics section
            metrics_html = f"""
            <div class="section">
                <h2>Extraction Summary</h2>
                <div class="metric">
                    <div class="metric-value">{total_pages}</div>
                    <div class="metric-label">Pages Processed</div>
                </div>
                <div class="metric">
                    <div class="metric-value">{total_terms}</div>
                    <div class="metric-label">Terms Extracted</div>
                </div>
                <div class="metric">
                    <div class="metric-value">{extraction_time:.2f}s</div>
                    <div class="metric-label">Processing Time</div>
                </div>
                <div class="metric">
                    <div class="metric-value">{confidence_score:.1%}</div>
                    <div class="metric-label">Confidence Score</div>
                </div>
            </div>
            """
            
            # Create terms breakdown
            terms_breakdown = extraction_results.get('terms_breakdown', {})
            if terms_breakdown:
                terms_html = """
                <div class="section">
                    <h2>Terms Breakdown</h2>
                    <table>
                        <tr><th>Category</th><th>Count</th><th>Percentage</th></tr>
                """
                
                for category, count in terms_breakdown.items():
                    percentage = (count / total_terms * 100) if total_terms > 0 else 0
                    terms_html += f"""
                        <tr>
                            <td>{category}</td>
                            <td>{count}</td>
                            <td>{percentage:.1f}%</td>
                        </tr>
                    """
                
                terms_html += "</table></div>"
            else:
                terms_html = ""
            
            # Create errors/warnings section
            errors = extraction_results.get('errors', [])
            warnings = extraction_results.get('warnings', [])
            
            issues_html = ""
            if errors or warnings:
                issues_html = """
                <div class="section">
                    <h2>Issues & Warnings</h2>
                """
                
                if errors:
                    issues_html += "<h3>Errors</h3><ul>"
                    for error in errors:
                        issues_html += f"<li>{error}</li>"
                    issues_html += "</ul>"
                
                if warnings:
                    issues_html += "<h3>Warnings</h3><ul>"
                    for warning in warnings:
                        issues_html += f"<li>{warning}</li>"
                    issues_html += "</ul>"
                
                issues_html += "</div>"
            
            # Combine all sections
            content = metrics_html + terms_html + issues_html
            
            # Generate report
            report_html = self.template.render(
                title="Extraction Summary Report",
                company_name=self.company_name,
                date=datetime.now().strftime('%Y-%m-%d %H:%M:%S'),
                content=content,
                report_id=f"EXT_{datetime.now().strftime('%Y%m%d_%H%M%S')}"
            )
            
            logger.info("Extraction summary report generated successfully")
            return report_html
            
        except Exception as e:
            logger.error(f"Error generating extraction summary: {e}")
            raise
    
    def generate_bid_analysis_report(self, bid_data: Dict[str, Any]) -> str:
        """
        Generate a comprehensive bid analysis report
        
        Args:
            bid_data: Dictionary containing bid information
            
        Returns:
            str: HTML formatted bid analysis report
        """
        try:
            logger.info("Generating bid analysis report")
            
            # Extract key data
            project_info = bid_data.get('project_info', {})
            line_items = bid_data.get('line_items', [])
            pricing_summary = bid_data.get('pricing_summary', {})
            caltrans_analysis = bid_data.get('caltrans_analysis', {})
            
            # Create project overview
            project_html = f"""
            <div class="section">
                <h2>Project Overview</h2>
                <table>
                    <tr><td><strong>Project Name:</strong></td><td>{project_info.get('project_name', 'N/A')}</td></tr>
                    <tr><td><strong>Project Number:</strong></td><td>{project_info.get('project_number', 'N/A')}</td></tr>
                    <tr><td><strong>Bid Date:</strong></td><td>{datetime.now().strftime('%Y-%m-%d')}</td></tr>
                    <tr><td><strong>Company:</strong></td><td>{self.company_name}</td></tr>
                </table>
            </div>
            """
            
            # Create pricing analysis
            subtotal = pricing_summary.get('subtotal', 0)
            tax_amount = pricing_summary.get('tax_amount', 0)
            total = pricing_summary.get('total', 0)
            
            pricing_html = f"""
            <div class="section">
                <h2>Pricing Analysis</h2>
                <div class="metric">
                    <div class="metric-value">${subtotal:,.2f}</div>
                    <div class="metric-label">Subtotal</div>
                </div>
                <div class="metric">
                    <div class="metric-value">${tax_amount:,.2f}</div>
                    <div class="metric-label">Tax Amount</div>
                </div>
                <div class="metric">
                    <div class="metric-value">${total:,.2f}</div>
                    <div class="metric-label">Total Bid</div>
                </div>
            </div>
            """
            
            # Create line items analysis
            if line_items:
                items_df = pd.DataFrame(line_items)
                avg_price = items_df['unit_price'].mean() if 'unit_price' in items_df.columns else 0
                total_quantity = items_df['quantity'].sum() if 'quantity' in items_df.columns else 0
                
                items_html = f"""
                <div class="section">
                    <h2>Line Items Analysis</h2>
                    <div class="metric">
                        <div class="metric-value">{len(line_items)}</div>
                        <div class="metric-label">Total Items</div>
                    </div>
                    <div class="metric">
                        <div class="metric-value">{total_quantity}</div>
                        <div class="metric-label">Total Quantity</div>
                    </div>
                    <div class="metric">
                        <div class="metric-value">${avg_price:.2f}</div>
                        <div class="metric-label">Average Unit Price</div>
                    </div>
                </div>
                """
            else:
                items_html = ""
            
            # Create CalTrans analysis summary
            if caltrans_analysis:
                total_terms = caltrans_analysis.get('total_terms', 0)
                matched_products = caltrans_analysis.get('matched_products', 0)
                confidence_score = caltrans_analysis.get('confidence_score', 0)
                
                caltrans_html = f"""
                <div class="section">
                    <h2>CalTrans Analysis Summary</h2>
                    <div class="metric">
                        <div class="metric-value">{total_terms}</div>
                        <div class="metric-label">Terms Found</div>
                    </div>
                    <div class="metric">
                        <div class="metric-value">{matched_products}</div>
                        <div class="metric-label">Matched Products</div>
                    </div>
                    <div class="metric">
                        <div class="metric-value">{confidence_score:.1%}</div>
                        <div class="metric-label">Confidence Score</div>
                    </div>
                </div>
                """
            else:
                caltrans_html = ""
            
            # Combine all sections
            content = project_html + pricing_html + items_html + caltrans_html
            
            # Generate report
            report_html = self.template.render(
                title="Bid Analysis Report",
                company_name=self.company_name,
                date=datetime.now().strftime('%Y-%m-%d %H:%M:%S'),
                content=content,
                report_id=f"BID_{datetime.now().strftime('%Y%m%d_%H%M%S')}"
            )
            
            logger.info("Bid analysis report generated successfully")
            return report_html
            
        except Exception as e:
            logger.error(f"Error generating bid analysis report: {e}")
            raise
    
    def create_project_comparison(self, project_list: List[Dict[str, Any]]) -> Dict[str, Any]:
        """
        Create a project comparison analysis
        
        Args:
            project_list: List of project dictionaries
            
        Returns:
            Dict: Comparison analysis results
        """
        try:
            logger.info("Creating project comparison analysis")
            
            if not project_list:
                return {"error": "No projects provided for comparison"}
            
            # Convert to DataFrame for analysis
            df = pd.DataFrame(project_list)
            
            comparison_results = {
                'total_projects': len(project_list),
                'comparison_date': datetime.now().isoformat(),
                'summary_stats': {},
                'trends': {},
                'recommendations': []
            }
            
            # Calculate summary statistics
            if 'total_bid' in df.columns:
                comparison_results['summary_stats']['avg_bid_amount'] = df['total_bid'].mean()
                comparison_results['summary_stats']['min_bid_amount'] = df['total_bid'].min()
                comparison_results['summary_stats']['max_bid_amount'] = df['total_bid'].max()
                comparison_results['summary_stats']['bid_std_dev'] = df['total_bid'].std()
            
            if 'confidence_score' in df.columns:
                comparison_results['summary_stats']['avg_confidence'] = df['confidence_score'].mean()
                comparison_results['summary_stats']['min_confidence'] = df['confidence_score'].min()
                comparison_results['summary_stats']['max_confidence'] = df['confidence_score'].max()
            
            # Analyze trends
            if 'bid_date' in df.columns:
                df['bid_date'] = pd.to_datetime(df['bid_date'])
                df_sorted = df.sort_values('bid_date')
                
                if len(df_sorted) > 1:
                    # Calculate trend in bid amounts
                    if 'total_bid' in df_sorted.columns:
                        trend_slope = (df_sorted['total_bid'].iloc[-1] - df_sorted['total_bid'].iloc[0]) / len(df_sorted)
                        comparison_results['trends']['bid_amount_trend'] = 'increasing' if trend_slope > 0 else 'decreasing'
                        comparison_results['trends']['trend_slope'] = trend_slope
                    
                    # Calculate trend in confidence scores
                    if 'confidence_score' in df_sorted.columns:
                        conf_trend_slope = (df_sorted['confidence_score'].iloc[-1] - df_sorted['confidence_score'].iloc[0]) / len(df_sorted)
                        comparison_results['trends']['confidence_trend'] = 'improving' if conf_trend_slope > 0 else 'declining'
                        comparison_results['trends']['confidence_slope'] = conf_trend_slope
            
            # Generate recommendations
            if 'confidence_score' in df.columns and df['confidence_score'].mean() < 0.8:
                comparison_results['recommendations'].append(
                    "Consider improving extraction accuracy - average confidence score is below 80%"
                )
            
            if 'total_bid' in df.columns and df['total_bid'].std() > df['total_bid'].mean() * 0.3:
                comparison_results['recommendations'].append(
                    "High variability in bid amounts detected - review pricing strategy"
                )
            
            if len(project_list) < 5:
                comparison_results['recommendations'].append(
                    "Limited data for comparison - consider analyzing more projects"
                )
            
            logger.info("Project comparison analysis completed successfully")
            return comparison_results
            
        except Exception as e:
            logger.error(f"Error creating project comparison: {e}")
            raise
    
    def export_management_dashboard(self, data: Dict[str, Any]) -> bytes:
        """
        Export a management dashboard with charts and metrics
        
        Args:
            data: Dictionary containing dashboard data
            
        Returns:
            bytes: HTML dashboard as bytes
        """
        try:
            logger.info("Exporting management dashboard")
            
            # Create dashboard HTML
            dashboard_html = self._create_dashboard_html(data)
            
            # Convert to bytes
            dashboard_bytes = dashboard_html.encode('utf-8')
            
            logger.info("Management dashboard exported successfully")
            return dashboard_bytes
            
        except Exception as e:
            logger.error(f"Error exporting management dashboard: {e}")
            raise
    
    def _create_dashboard_html(self, data: Dict[str, Any]) -> str:
        """Create HTML dashboard with charts"""
        
        # Extract data
        projects = data.get('projects', [])
        metrics = data.get('metrics', {})
        trends = data.get('trends', {})
        
        # Create metrics section
        metrics_html = """
        <div class="section">
            <h2>Key Performance Metrics</h2>
        """
        
        for metric_name, metric_value in metrics.items():
            if isinstance(metric_value, (int, float)):
                if 'amount' in metric_name.lower() or 'price' in metric_name.lower():
                    formatted_value = f"${metric_value:,.2f}"
                elif 'percentage' in metric_name.lower() or 'rate' in metric_name.lower():
                    formatted_value = f"{metric_value:.1%}"
                else:
                    formatted_value = f"{metric_value:,}"
            else:
                formatted_value = str(metric_value)
            
            metrics_html += f"""
            <div class="metric">
                <div class="metric-value">{formatted_value}</div>
                <div class="metric-label">{metric_name.replace('_', ' ').title()}</div>
            </div>
            """
        
        metrics_html += "</div>"
        
        # Create projects table
        if projects:
            projects_html = """
            <div class="section">
                <h2>Recent Projects</h2>
                <table>
                    <tr><th>Project</th><th>Bid Amount</th><th>Confidence</th><th>Status</th></tr>
            """
            
            for project in projects[:10]:  # Show last 10 projects
                projects_html += f"""
                <tr>
                    <td>{project.get('project_name', 'N/A')}</td>
                    <td>${project.get('total_bid', 0):,.2f}</td>
                    <td>{project.get('confidence_score', 0):.1%}</td>
                    <td>{project.get('status', 'N/A')}</td>
                </tr>
                """
            
            projects_html += "</table></div>"
        else:
            projects_html = ""
        
        # Create trends section
        if trends:
            trends_html = """
            <div class="section">
                <h2>Trends Analysis</h2>
            """
            
            for trend_name, trend_data in trends.items():
                if isinstance(trend_data, dict):
                    direction = trend_data.get('direction', 'stable')
                    value = trend_data.get('value', 0)
                    trends_html += f"""
                    <div class="metric">
                        <div class="metric-value">{direction.title()}</div>
                        <div class="metric-label">{trend_name.replace('_', ' ').title()}</div>
                    </div>
                    """
            
            trends_html += "</div>"
        else:
            trends_html = ""
        
        # Combine all sections
        content = metrics_html + projects_html + trends_html
        
        # Generate dashboard
        dashboard_html = self.template.render(
            title="Management Dashboard",
            company_name=self.company_name,
            date=datetime.now().strftime('%Y-%m-%d %H:%M:%S'),
            content=content,
            report_id=f"DASH_{datetime.now().strftime('%Y%m%d_%H%M%S')}"
        )
        
        return dashboard_html
    
    def generate_performance_report(self, performance_data: Dict[str, Any]) -> str:
        """
        Generate a performance tracking report
        
        Args:
            performance_data: Dictionary containing performance metrics
            
        Returns:
            str: HTML formatted performance report
        """
        try:
            logger.info("Generating performance report")
            
            # Extract performance metrics
            accuracy_metrics = performance_data.get('accuracy_metrics', {})
            time_metrics = performance_data.get('time_metrics', {})
            cost_metrics = performance_data.get('cost_metrics', {})
            
            # Create accuracy section
            accuracy_html = """
            <div class="section">
                <h2>Accuracy Metrics</h2>
            """
            
            for metric_name, metric_value in accuracy_metrics.items():
                if isinstance(metric_value, float):
                    formatted_value = f"{metric_value:.1%}"
                else:
                    formatted_value = str(metric_value)
                
                accuracy_html += f"""
                <div class="metric">
                    <div class="metric-value">{formatted_value}</div>
                    <div class="metric-label">{metric_name.replace('_', ' ').title()}</div>
                </div>
                """
            
            accuracy_html += "</div>"
            
            # Create time metrics section
            time_html = """
            <div class="section">
                <h2>Processing Time Metrics</h2>
            """
            
            for metric_name, metric_value in time_metrics.items():
                if isinstance(metric_value, (int, float)):
                    formatted_value = f"{metric_value:.2f}s"
                else:
                    formatted_value = str(metric_value)
                
                time_html += f"""
                <div class="metric">
                    <div class="metric-value">{formatted_value}</div>
                    <div class="metric-label">{metric_name.replace('_', ' ').title()}</div>
                </div>
                """
            
            time_html += "</div>"
            
            # Create cost metrics section
            cost_html = """
            <div class="section">
                <h2>Cost Analysis</h2>
            """
            
            for metric_name, metric_value in cost_metrics.items():
                if isinstance(metric_value, (int, float)):
                    formatted_value = f"${metric_value:,.2f}"
                else:
                    formatted_value = str(metric_value)
                
                cost_html += f"""
                <div class="metric">
                    <div class="metric-value">{formatted_value}</div>
                    <div class="metric-label">{metric_name.replace('_', ' ').title()}</div>
                </div>
                """
            
            cost_html += "</div>"
            
            # Combine all sections
            content = accuracy_html + time_html + cost_html
            
            # Generate report
            report_html = self.template.render(
                title="Performance Tracking Report",
                company_name=self.company_name,
                date=datetime.now().strftime('%Y-%m-%d %H:%M:%S'),
                content=content,
                report_id=f"PERF_{datetime.now().strftime('%Y%m%d_%H%M%S')}"
            )
            
            logger.info("Performance report generated successfully")
            return report_html
            
        except Exception as e:
            logger.error(f"Error generating performance report: {e}")
            raise
    
    def save_report(self, report_content: str, filename: str, format_type: str = 'html') -> str:
        """
        Save report to file
        
        Args:
            report_content: Report content
            filename: Output filename
            format_type: Output format (html, json, txt)
            
        Returns:
            str: Path to saved file
        """
        try:
            # Ensure output directory exists
            self.output_dir.mkdir(parents=True, exist_ok=True)
            
            # Create full file path
            file_path = self.output_dir / f"{filename}.{format_type}"
            
            # Save based on format
            if format_type == 'html':
                with open(file_path, 'w', encoding='utf-8') as f:
                    f.write(report_content)
            elif format_type == 'json':
                # Convert numpy types to native Python types for JSON serialization
                def convert_numpy_types(obj):
                    if hasattr(obj, 'item'):
                        return obj.item()
                    elif isinstance(obj, dict):
                        return {k: convert_numpy_types(v) for k, v in obj.items()}
                    elif isinstance(obj, list):
                        return [convert_numpy_types(item) for item in obj]
                    else:
                        return obj
                
                serializable_content = convert_numpy_types(report_content)
                with open(file_path, 'w', encoding='utf-8') as f:
                    json.dump(serializable_content, f, indent=2)
            elif format_type == 'txt':
                with open(file_path, 'w', encoding='utf-8') as f:
                    f.write(report_content)
            else:
                raise ValueError(f"Unsupported format: {format_type}")
            
            logger.info(f"Report saved to: {file_path}")
            return str(file_path)
            
        except Exception as e:
            logger.error(f"Error saving report: {e}")
            raise


def create_sample_extraction_data() -> Dict[str, Any]:
    """Create sample extraction data for testing"""
    return {
        'total_pages': 15,
        'total_terms': 127,
        'extraction_time': 45.2,
        'confidence_score': 0.87,
        'terms_breakdown': {
            'Safety Equipment': 45,
            'Construction Materials': 32,
            'Tools': 28,
            'Signage': 22
        },
        'errors': [
            'Low resolution image on page 7',
            'Unclear text on page 12'
        ],
        'warnings': [
            'Multiple similar terms detected',
            'Some quantities may need manual verification'
        ]
    }


def create_sample_bid_data() -> Dict[str, Any]:
    """Create sample bid data for testing"""
    return {
        'project_info': {
            'project_name': 'CalTrans Highway Maintenance Project',
            'project_number': 'CT-2024-001',
            'contact_person': 'John Smith',
            'phone': '(555) 123-4567',
            'email': 'john.smith@company.com'
        },
        'line_items': [
            {
                'sku': 'CT-001',
                'description': 'Traffic Cone - 28" Orange',
                'quantity': 100,
                'unit_price': 12.50,
                'extended_price': 1250.00,
                'notes': 'High visibility safety equipment'
            },
            {
                'sku': 'CT-002',
                'description': 'Barricade - Type III',
                'quantity': 25,
                'unit_price': 45.00,
                'extended_price': 1125.00,
                'notes': 'Heavy-duty construction barrier'
            }
        ],
        'pricing_summary': {
            'subtotal': 2375.00,
            'tax_rate': 0.085,
            'tax_amount': 201.88,
            'shipping': 150.00,
            'handling': 75.00,
            'total': 2801.88
        },
        'caltrans_analysis': {
            'total_terms': 15,
            'matched_products': 12,
            'unmatched_terms': 3,
            'confidence_score': 0.85
        }
    }


def create_sample_dashboard_data() -> Dict[str, Any]:
    """Create sample dashboard data for testing"""
    return {
        'metrics': {
            'total_projects': 45,
            'avg_bid_amount': 125000,
            'success_rate': 0.78,
            'avg_processing_time': 2.5,
            'total_revenue': 5625000
        },
        'projects': [
            {
                'project_name': 'Highway Project A',
                'total_bid': 150000,
                'confidence_score': 0.92,
                'status': 'Won'
            },
            {
                'project_name': 'Bridge Project B',
                'total_bid': 89000,
                'confidence_score': 0.85,
                'status': 'Pending'
            }
        ],
        'trends': {
            'bid_amount_trend': {
                'direction': 'increasing',
                'value': 0.15
            },
            'confidence_trend': {
                'direction': 'improving',
                'value': 0.08
            }
        }
    }


if __name__ == "__main__":
    # Example usage
    try:
        # Create report generator
        generator = ReportGenerator("Zenlytic Solutions")
        
        # Generate extraction summary
        extraction_data = create_sample_extraction_data()
        extraction_report = generator.generate_extraction_summary(extraction_data)
        generator.save_report(extraction_report, "extraction_summary", "html")
        
        # Generate bid analysis
        bid_data = create_sample_bid_data()
        bid_report = generator.generate_bid_analysis_report(bid_data)
        generator.save_report(bid_report, "bid_analysis", "html")
        
        # Create project comparison
        projects = [
            {'project_name': 'Project A', 'total_bid': 100000, 'confidence_score': 0.85, 'bid_date': '2024-01-15'},
            {'project_name': 'Project B', 'total_bid': 120000, 'confidence_score': 0.90, 'bid_date': '2024-02-01'},
            {'project_name': 'Project C', 'total_bid': 95000, 'confidence_score': 0.88, 'bid_date': '2024-02-15'}
        ]
        comparison = generator.create_project_comparison(projects)
        
        # Convert numpy types for JSON serialization
        def convert_numpy_types(obj):
            if hasattr(obj, 'item'):
                return obj.item()
            elif isinstance(obj, dict):
                return {k: convert_numpy_types(v) for k, v in obj.items()}
            elif isinstance(obj, list):
                return [convert_numpy_types(item) for item in obj]
            else:
                return obj
        
        serializable_comparison = convert_numpy_types(comparison)
        generator.save_report(json.dumps(serializable_comparison, indent=2), "project_comparison", "json")
        
        # Export dashboard
        dashboard_data = create_sample_dashboard_data()
        dashboard_bytes = generator.export_management_dashboard(dashboard_data)
        with open('output/reports/management_dashboard.html', 'wb') as f:
            f.write(dashboard_bytes)
        
        print("All reports generated successfully!")
        print("Check the 'output/reports' directory for generated files.")
        
    except Exception as e:
        print(f"Error generating reports: {e}") 